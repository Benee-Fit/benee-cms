generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Organization {
  id         String   @id @default(cuid())
  clerkId    String   @unique
  websiteUrl String?
  orgName    String
  orgLogo    String?
  orgType    String?
  orgSize    String?
  orgEmail   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  users      User[]

  @@index([clerkId])
}

model User {
  id                String              @id @default(cuid())
  clerkId           String              @unique
  email             String              @unique
  userType          UserType
  accessLevel       AccessLevel
  emailVerified     Boolean             @default(false)
  isActive          Boolean             @default(true)
  avatarUrl         String?
  lastLoginAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  orgId             String?
  organization      Organization?       @relation(fields: [orgId], references: [id])
  managedClients    BrokerClient[]      @relation("BrokerToClients")
  uploadedDocuments ClientDocument[]    @relation("DocumentUploader")
  createdReports    QuoteReport[]       @relation("ReportCreator")
  createdShareLinks ReportShareLink[]   @relation("ShareLinkCreator")
  brokerInsights    ClientInsightData[] @relation("BrokerInsights")

  @@index([clerkId])
  @@index([email])
  @@index([orgId])
}

model Page {
  id   Int    @id @default(autoincrement())
  name String
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BrokerClient {
  id                     String              @id @default(cuid())
  companyName            String
  policyNumber           String              @unique
  renewalDate            DateTime
  headcount              Int
  premium                Decimal             @db.Decimal(10, 2)
  revenue                Decimal             @db.Decimal(10, 2)
  industry               String
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  brokerId               String?
  assignedBroker         String?
  brokerCommissionSplit  Decimal?            @db.Decimal(5, 2)
  companyLocation        String?
  companySize            String?
  currentCarrier         String?
  individualSplits       Json?
  leadSource             String?
  leadershipCEO          String?
  leadershipCFO          String?
  leadershipCHRO         String?
  parentId               String?
  planAdmin              String?
  planManagementFee      Decimal?            @db.Decimal(10, 2)
  planType               String?
  splitWithAnotherBroker Boolean             @default(false)
  withCarrierSince       DateTime?
  broker                 User?               @relation("BrokerToClients", fields: [brokerId], references: [id])
  parent                 BrokerClient?       @relation("ClientHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  divisions              BrokerClient[]      @relation("ClientHierarchy")
  documents              ClientDocument[]
  reports                QuoteReport[]
  insights               ClientInsightData[] @relation("ClientInsights")

  @@index([policyNumber])
  @@index([renewalDate])
  @@index([brokerId])
  @@index([parentId])
}

model ClientDocument {
  id            String       @id @default(cuid())
  clientId      String
  uploadedById  String?
  fileName      String
  fileType      String
  fileUrl       String
  uploadDate    DateTime     @default(now())
  documentType  String
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  documentTitle String?
  jsonData      Json?
  client        BrokerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  uploadedBy    User?        @relation("DocumentUploader", fields: [uploadedById], references: [id])

  @@index([clientId])
  @@index([uploadedById])
}

model QuoteReport {
  id          String            @id @default(cuid())
  title       String
  clientId    String?
  createdById String
  data        Json
  documentIds String[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  client      BrokerClient?     @relation(fields: [clientId], references: [id])
  createdBy   User              @relation("ReportCreator", fields: [createdById], references: [id])
  shareLinks  ReportShareLink[]

  @@index([clientId])
  @@index([createdById])
}

model ReportShareLink {
  id             String      @id @default(cuid())
  reportId       String
  shareToken     String      @unique
  createdById    String
  expiresAt      DateTime?
  password       String?
  accessCount    Int         @default(0)
  lastAccessedAt DateTime?
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  report         QuoteReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  createdBy      User        @relation("ShareLinkCreator", fields: [createdById], references: [id])

  @@index([reportId])
  @@index([shareToken])
  @@index([createdById])
}

model ClientInsightData {
  id          String             @id @default(cuid())
  clientId    String
  brokerId    String
  category    InsightCategory
  type        String
  title       String
  description String?
  value       Json
  metadata    Json?
  period      String?
  targetValue Json?
  isActive    Boolean            @default(true)
  sortOrder   Int?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  client      BrokerClient       @relation("ClientInsights", fields: [clientId], references: [id], onDelete: Cascade)
  broker      User               @relation("BrokerInsights", fields: [brokerId], references: [id])
  timeSeries  ClientTimeSeries[]

  @@index([clientId])
  @@index([brokerId])
  @@index([category])
  @@index([type])
  @@index([period])
}

model ClientTimeSeries {
  id        String            @id @default(cuid())
  insightId String
  date      DateTime
  value     Json
  metadata  Json?
  createdAt DateTime          @default(now())
  insight   ClientInsightData @relation(fields: [insightId], references: [id], onDelete: Cascade)

  @@index([insightId])
  @@index([date])
  @@index([insightId, date])
}

enum UserType {
  ADMIN
  CLIENT
  BROKER
  MANAGER
  USER
  INTERNAL
}

enum AccessLevel {
  ADMIN
  MANAGER
  USER
}

enum InsightCategory {
  METRIC
  REVENUE
  RISK
  OPPORTUNITY
}
