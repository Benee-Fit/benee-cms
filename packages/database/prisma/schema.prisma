// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../generated/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enums
enum UserType {
  ADMIN
  CLIENT
  BROKER
  MANAGER
  USER
  INTERNAL
}

enum AccessLevel {
  ADMIN
  MANAGER
  USER
}

// User model
model User {
  id            String      @id @default(cuid())
  clerkId       String      @unique
  email         String      @unique
  userType      UserType
  accessLevel   AccessLevel
  emailVerified Boolean     @default(false)
  isActive      Boolean     @default(true)
  avatarUrl     String?
  lastLoginAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  // Relationships
  managedClients    BrokerClient[]    @relation("BrokerToClients")
  uploadedDocuments ClientDocument[]  @relation("DocumentUploader")
  createdReports    QuoteReport[]     @relation("ReportCreator")
  createdShareLinks ReportShareLink[] @relation("ShareLinkCreator")

  @@index([clerkId])
  @@index([email])
}

// This is a stub model.
// Delete it and add your own Prisma models.
model Page {
  id   Int    @id @default(autoincrement())
  name String
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BrokerClient {
  id           String           @id @default(cuid())
  companyName  String
  policyNumber String           @unique
  renewalDate  DateTime
  headcount    Int
  premium      Decimal          @db.Decimal(10, 2)
  revenue      Decimal          @db.Decimal(10, 2)
  industry     String
  brokerId     String? // Reference to the broker managing this client
  broker       User?            @relation("BrokerToClients", fields: [brokerId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  documents    ClientDocument[]
  reports      QuoteReport[]

  @@index([policyNumber])
  @@index([renewalDate])
  @@index([brokerId])
}

model ClientDocument {
  id            String       @id @default(cuid())
  clientId      String
  client        BrokerClient @relation(fields: [clientId], references: [id], onDelete: Cascade)
  uploadedById  String? // Reference to the user who uploaded the document
  uploadedBy    User?        @relation("DocumentUploader", fields: [uploadedById], references: [id])
  fileName      String
  fileType      String
  fileUrl       String
  uploadDate    DateTime     @default(now())
  documentType  String
  description   String?
  documentTitle String? // Title of the document
  jsonData      Json? // Structured data extracted from the document
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([clientId])
  @@index([uploadedById])
}

// For storing the quote tool report data
model QuoteReport {
  id          String        @id @default(cuid())
  title       String
  clientId    String? // Optional if reports can be created without associating with a client
  client      BrokerClient? @relation(fields: [clientId], references: [id])
  createdById String
  createdBy   User          @relation("ReportCreator", fields: [createdById], references: [id])
  data        Json // The structured report data (coverages, premiums, etc.)
  documentIds String[] // Array of document IDs used to generate this report
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  shareLinks ReportShareLink[]

  @@index([clientId])
  @@index([createdById])
}

// For managing shareable links to reports
model ReportShareLink {
  id             String      @id @default(cuid())
  reportId       String
  report         QuoteReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  shareToken     String      @unique // Unique token for the link
  createdById    String
  createdBy      User        @relation("ShareLinkCreator", fields: [createdById], references: [id])
  expiresAt      DateTime? // Optional expiration date
  password       String? // Optional password protection
  accessCount    Int         @default(0) // Track number of times accessed
  lastAccessedAt DateTime? // Last time the link was accessed
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([reportId])
  @@index([shareToken])
  @@index([createdById])
}
